**Immediate (NOW):**
- Reading from any number of csv values works. Uncomment code and fix it one by one.
- Create ID column.
- When adding new record, make sure column #1 exists before focuing and doing edit mode.
- Reordering columns.
- CSV writer.
- Add new column.
- Statistics headers:
	- Next to statistics header display ribbon menu to select which columns are to be used.
	- Create method: get list of column headers.

- Do a lot of test before releasing.

**Upcoming (SOON):**
- More flexible CSV file format. Start making it more custom.
	- Datagrid autofill.
	- Datagrid. User can add columns.
	- Max film rating.
	- FilmRecord maybe will have dictionary of values. If it works with datagrid source.
- If release year or watch date is icorrect (unassigned from above), make the cell red but only after deselecting it, not in the middle of adding.
- Clear all and autosave can result in losing all data if uncareful.
	- Clear all and save should save current list as archived list to easy find if accidental loss.
- Search option to find film titles.
- Clear all data is too accessible. When pressed ask for confirmation and maybe move it somewhere else.
- Revamp settings. Make settings button. Keep some preferences on main screen and some settings in the separate window.
- Protection against super big text files. If file is so big it can block the program, display loading and an option to cancel.
	- If cancel or unexpected close happens. Do not store the last filepath. It will open big file again on startup. If cancel happens, open new empty file.
- Investigate exceptions when debugging. The ones with tokens and tasks.
- More flexible statistics. It requires releaseYear, rating, watchDate. If one of them is missing, it should display information about missing columns.
- Use Windows accent colour for buttons and other elements.
	- Create method that updates selected elements with accent colour. Maybe use styling file so the style applies to all buttons across this program.
(DELAYED, MAKE COLUMNS FLEXIBLE AND EDITABLE FIRST)
- Scrolling list will mix up red cells.
	- Fix the issue caused by virtualization of rows.
- If a film has incorrect or empty release year or rating, display unassigned decade/rating statistic.
	- Filtering clears the coloured cells.
	- Create a counter for invalid cells.

**Future Plans (FUTURE):**
- Decide what settings are embedded in exe, which are in settings and which are in config file.
- Enable default file locations for Open/Save operations.
- Disable non-functional buttons.
- Automatically update statistics after each modification.
- Require confirmation for cell changes.
- Implement 'Enter' key navigation between cells.
- Include buttons to open, save, and save changes in different locations.
- Ensure integrity of dates, preventing backward progression.
- Prepare the program for release, including executable creation with jlink.
- Perform duplicate checks for entered titles and release years.
- Enable actions on multiple selected rows: Cut, Copy, Paste, Delete.
- Consider implementing shortcut keys and an undo feature.
- Explore learning opportunities with Hibernate and Spring frameworks.
- When cell selected, mouse wheel changes year, date, rating.
- In settings, user can choose rating system, max 4, 5, maybe 10 stars.
- Rating system will affect GUI and other things.
- When entering film title, show propositions in case film already in list.
- Selecting a yearly/decadal row would highlight the rows in main datagrid.
- (big) Reorganise how film records are stored. When adding a film record, editing release year or watch date, it assigns a film to proper statistics group.
	- This will work much faster than current solution. Currently all lists and maps are made with each change.
- A link to imdb film. (new property in filmrecord model)
- Colour cells depending on change. New cells green, modified blue, removed red.
- Introduce Series record. Not only films, but can also add series, and in the future books etc.
- Entering google result or imbd or another website for films link as english title in the program, will result in parsing the data from webpage to fill out the film details.
- Buttons to move record up or down. It will affect record ID. The records IDs must be by watch date. Create button maybe to apply IDs based on watch date.
	- Some watch dates are the same. For some watch dates if DAY is the same, set up hour but not display it.
- Create separate class CsvColumns that will be used to store default films columns but also will help csv reader and writer to read and save columns.
	- Also if youm need make changes like adding new columns like personal review, it will be easier to implement new columns, or custom user made ones.
- StatisticsManager has 2 heavy methods. GetDecadalReport and GetYearlyReport. Both generate new dictionaries and collections on each change of film record or the observable list.
	- Maybe create a class StatisticsOfRecord and each FilmRecord object will have object of StatisticsOfRecord. And this class would have a decade and year property that will be easier to change and manage on per film basis. Each change would result in removing this object from the dictionary if change in watch date or release date would change the decade or the year.
- If opening new file doesn't follow csv and this program style, it should display information that the data may display icorrectly because the file is not supported or sth like this.
-
